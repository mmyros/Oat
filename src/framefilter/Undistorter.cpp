//******************************************************************************
//* File:   Undistorter.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include "Undistorter.h"

#include <string>

#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/calib3d.hpp>
#include <cpptoml.h>

#include "../../lib/utility/TOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

namespace oat {

Undistorter::Undistorter(const std::string &source_name,
                         const std::string &sink_name)
: FrameFilter(source_name, sink_name)
{
    // Nothing
}

void Undistorter::appendOptions(po::options_description &opts)
{
    // Accepts a config file
    FrameFilter::appendOptions(opts);

    // Update CLI options
    po::options_description local_opts;
    local_opts.add_options()
        ("camera-matrix,k", po::value<std::string>(),
         "Nine element float array, [K11,K12,...,K33], specifying the 3x3 "
         "camera matrix for your imaging setup. Generated by oat-calibrate.")
        ("distortion-coeffs,d", po::value<std::string>(),
         "Five to eight element float array, [x1,x2,x3,...], specifying lens "
         "distortion coefficients. Generated by oat-calibrate.")
        ;

    opts.add(local_opts);

    // Return valid keys
    for (auto &o : local_opts.options())
        config_keys_.push_back(o->long_name());
}

void Undistorter::configure(const po::variables_map &vm)
{
    // Check for config file and entry correctness
    auto config_table = oat::config::getConfigTable(vm);
    oat::config::checkKeys(config_keys_, config_table);

    if (oat::config::getArray<double>(
            vm, config_table, "distortion-coeffs", dist_coeff_, true)) {

        if (dist_coeff_.size() < 5 || dist_coeff_.size() > 8)
            throw (std::runtime_error("Distortion coefficients consist of 5 to 8 values."));
    }

    // Camera Matrix
    std::vector<double> K;
    if (oat::config::getArray<double, 9>(vm, config_table, "camera-matrix", K, true)) {

        camera_matrix_(0, 0) = K[0];
        camera_matrix_(0, 1) = K[1];
        camera_matrix_(0, 2) = K[2];
        camera_matrix_(1, 0) = K[3];
        camera_matrix_(1, 1) = K[4];
        camera_matrix_(1, 2) = K[5];
        camera_matrix_(2, 0) = K[6];
        camera_matrix_(2, 1) = K[7];
        camera_matrix_(2, 2) = K[8];
    }
}

void Undistorter::filter(cv::Mat &frame)
{
    cv::Mat temp = frame.clone();
    // TODO: too slow -- GPU implementation.
    cv::undistort(temp, frame, camera_matrix_, dist_coeff_);
}

} /* namespace oat */
